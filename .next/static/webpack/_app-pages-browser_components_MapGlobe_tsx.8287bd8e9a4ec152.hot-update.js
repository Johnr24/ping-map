"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_components_MapGlobe_tsx",{

/***/ "(app-pages-browser)/./components/MapGlobe.tsx":
/*!*********************************!*\
  !*** ./components/MapGlobe.tsx ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* binding */ MapGlobe; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var maplibre_gl__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! maplibre-gl */ \"(app-pages-browser)/./node_modules/maplibre-gl/dist/maplibre-gl.js\");\n/* harmony import */ var maplibre_gl__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(maplibre_gl__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _utils_pingCalculator__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/utils/pingCalculator */ \"(app-pages-browser)/./utils/pingCalculator.ts\");\n/* harmony import */ var maplibre_gl_dist_maplibre_gl_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! maplibre-gl/dist/maplibre-gl.css */ \"(app-pages-browser)/./node_modules/maplibre-gl/dist/maplibre-gl.css\");\n/* __next_internal_client_entry_do_not_use__ default auto */ \nvar _s = $RefreshSig$();\n\n\n\n\nfunction MapGlobe() {\n    _s();\n    const mapContainer = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const map = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const markersRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const pointsRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([]);\n    const [pingTime, setPingTime] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"N/A\");\n    // Initialize map\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (map.current) return; // Only initialize once\n        if (mapContainer.current) {\n            // Create the map with a standard style\n            map.current = new (maplibre_gl__WEBPACK_IMPORTED_MODULE_2___default().Map)({\n                container: mapContainer.current,\n                style: {\n                    version: 8,\n                    sources: {\n                        \"raster-tiles\": {\n                            type: \"raster\",\n                            tiles: [\n                                \"https://tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                            ],\n                            tileSize: 256,\n                            attribution: \"\\xa9 OpenStreetMap contributors\"\n                        }\n                    },\n                    layers: [\n                        {\n                            id: \"simple-tiles\",\n                            type: \"raster\",\n                            source: \"raster-tiles\",\n                            minzoom: 0,\n                            maxzoom: 19\n                        }\n                    ]\n                },\n                center: [\n                    0,\n                    0\n                ],\n                zoom: 1,\n                pitch: 0,\n                bearing: 0\n            });\n            // Set dark background for the map\n            mapContainer.current.style.background = \"#000\";\n            // Add navigation control\n            map.current.addControl(new (maplibre_gl__WEBPACK_IMPORTED_MODULE_2___default().NavigationControl)());\n            // Add attribution\n            map.current.addControl(new (maplibre_gl__WEBPACK_IMPORTED_MODULE_2___default().AttributionControl)({\n                customAttribution: \"\\xa9 OpenStreetMap contributors\"\n            }), \"bottom-right\");\n            // Add click handler for adding markers\n            map.current.on(\"click\", (e)=>{\n                console.log(\"Map clicked at:\", e.lngLat);\n                const { lng, lat } = e.lngLat;\n                console.log(\"Adding marker at: lng=\".concat(lng, \", lat=\").concat(lat));\n                addMarker(lng, lat);\n            });\n            // Add debug listener for map load\n            map.current.on(\"load\", ()=>{\n                var // Set globe projection after map is loaded\n                _map_current;\n                console.log(\"Map loaded\");\n                (_map_current = map.current) === null || _map_current === void 0 ? void 0 : _map_current.setProjection({\n                    type: \"globe\"\n                });\n                console.log(\"Globe projection set\");\n            });\n            // Add debug listener for style load\n            map.current.on(\"style.load\", ()=>{\n                console.log(\"Map style loaded\");\n            });\n        }\n        // Cleanup on unmount\n        return ()=>{\n            markersRef.current.forEach((marker)=>marker.remove());\n            if (map.current) {\n                map.current.remove();\n                map.current = null;\n            }\n        };\n    }, []);\n    // Function to add a marker at the specified coordinates\n    const addMarker = (lng, lat)=>{\n        if (!map.current) return;\n        console.log(\"Adding marker at:\", [\n            lng,\n            lat\n        ]);\n        // Manage markers directly with refs instead of state\n        // If we already have 2 markers, remove the first one\n        if (markersRef.current.length >= 2) {\n            const oldMarker = markersRef.current.shift();\n            oldMarker === null || oldMarker === void 0 ? void 0 : oldMarker.remove();\n            pointsRef.current.shift();\n        }\n        // Determine if this will be the first or second marker in the pair\n        const isFirstInPair = markersRef.current.length === 0;\n        const markerColor = isFirstInPair ? \"#ff3b30\" : \"#007aff\" // Red for first, blue for second\n        ;\n        // Create marker element\n        const el = document.createElement(\"div\");\n        el.className = \"marker\";\n        el.style.backgroundColor = markerColor;\n        console.log(\"Adding \".concat(isFirstInPair ? \"first (red)\" : \"second (blue)\", \" marker in pair\"));\n        // Create and add the marker\n        const marker = new (maplibre_gl__WEBPACK_IMPORTED_MODULE_2___default().Marker)({\n            element: el,\n            anchor: \"center\"\n        }).setLngLat([\n            lng,\n            lat\n        ]).addTo(map.current);\n        // Add to our refs\n        markersRef.current.push(marker);\n        pointsRef.current.push([\n            lat,\n            lng\n        ]);\n        console.log(\"Current markers count:\", markersRef.current.length);\n        console.log(\"Current points:\", pointsRef.current);\n        // Draw line between points if we have exactly two\n        if (markersRef.current.length === 2) {\n            console.log(\"We have 2 markers, drawing line and calculating ping\");\n            drawRouteAndCalculatePing(pointsRef.current);\n        } else {\n            // Remove existing line if present\n            if (map.current.getSource(\"route\")) {\n                try {\n                    map.current.removeLayer(\"route-line\");\n                    map.current.removeLayer(\"route-glow\");\n                    map.current.removeSource(\"route\");\n                } catch (e) {\n                    console.error(\"Error removing existing layers:\", e);\n                }\n            }\n        }\n    };\n    // Separate function to draw route and calculate ping\n    const drawRouteAndCalculatePing = (routePoints)=>{\n        if (!map.current || routePoints.length !== 2) return;\n        // Get coordinates in correct format for calculations\n        const [lat1, lng1] = routePoints[0];\n        const [lat2, lng2] = routePoints[1];\n        console.log(\"Calculating ping time between:\", \"Point 1: \".concat(lat1, \", \").concat(lng1), \"Point 2: \".concat(lat2, \", \").concat(lng2));\n        const time = (0,_utils_pingCalculator__WEBPACK_IMPORTED_MODULE_3__.calculateTheoreticalPingTime)(lat1, lng1, lat2, lng2);\n        const distance = (0,_utils_pingCalculator__WEBPACK_IMPORTED_MODULE_3__.calculateGreatCircleDistance)(lat1, lng1, lat2, lng2);\n        console.log(\"Calculated values:\", {\n            time,\n            distance\n        });\n        // Format the ping time\n        const formattedTime = (0,_utils_pingCalculator__WEBPACK_IMPORTED_MODULE_3__.formatPingTime)(time);\n        setPingTime(formattedTime);\n        // Remove existing line if present\n        if (map.current.getSource(\"route\")) {\n            try {\n                map.current.removeLayer(\"route-line\");\n                map.current.removeLayer(\"route-glow\");\n                map.current.removeSource(\"route\");\n            } catch (e) {\n                console.error(\"Error removing existing layers:\", e);\n            }\n        }\n        // Add the new line source with coordinates in [lng, lat] format for GeoJSON\n        map.current.addSource(\"route\", {\n            type: \"geojson\",\n            data: {\n                type: \"Feature\",\n                properties: {},\n                geometry: {\n                    type: \"LineString\",\n                    coordinates: [\n                        [\n                            lng1,\n                            lat1\n                        ],\n                        [\n                            lng2,\n                            lat2\n                        ]\n                    ]\n                }\n            }\n        });\n        console.log(\"Added route source with coordinates:\", [\n            [\n                lng1,\n                lat1\n            ],\n            [\n                lng2,\n                lat2\n            ]\n        ]);\n        // Add the glow layer first\n        map.current.addLayer({\n            id: \"route-glow\",\n            type: \"line\",\n            source: \"route\",\n            layout: {\n                \"line-join\": \"round\",\n                \"line-cap\": \"round\"\n            },\n            paint: {\n                \"line-color\": \"#4db8ff\",\n                \"line-width\": 15,\n                \"line-opacity\": 0.8,\n                \"line-blur\": 15\n            }\n        });\n        console.log(\"Added glow layer\");\n        // Add the main line layer on top\n        map.current.addLayer({\n            id: \"route-line\",\n            type: \"line\",\n            source: \"route\",\n            layout: {\n                \"line-join\": \"round\",\n                \"line-cap\": \"round\"\n            },\n            paint: {\n                \"line-color\": \"#ffffff\",\n                \"line-width\": 5,\n                \"line-opacity\": 1,\n                \"line-dasharray\": [\n                    0.5,\n                    1\n                ]\n            }\n        });\n        console.log(\"Added line layer\");\n        // Calculate midpoint for popup\n        const midLat = (lat1 + lat2) / 2;\n        const midLng = (lng1 + lng2) / 2;\n        // Remove existing popups\n        const existingPopups = document.getElementsByClassName(\"ping-popup\");\n        Array.from(existingPopups).forEach((popup)=>popup.remove());\n        // Add the ping time popup\n        new (maplibre_gl__WEBPACK_IMPORTED_MODULE_2___default().Popup)({\n            closeButton: false,\n            closeOnClick: false,\n            className: \"ping-popup\",\n            anchor: \"center\"\n        }).setLngLat([\n            midLng,\n            midLat\n        ]).setHTML('\\n        <div class=\"text-center p-2\">\\n          <div class=\"font-bold text-lg text-blue-400\">'.concat(formattedTime, '</div>\\n          <div class=\"text-sm\">Distance: ').concat(distance.toFixed(0), \" km</div>\\n        </div>\\n      \")).addTo(map.current);\n        console.log(\"Added popup with ping time:\", formattedTime);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"instructions absolute top-4 left-4 z-10 bg-black/70 p-4 rounded-lg text-white max-w-md\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        className: \"text-xl font-bold mb-2\",\n                        children: \"Instructions:\"\n                    }, void 0, false, {\n                        fileName: \"/Users/john/Documents/colour_coding/ping-map/components/MapGlobe.tsx\",\n                        lineNumber: 274,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                        children: \"Click on two different locations on the globe to calculate the theoretical minimum ping time between them.\"\n                    }, void 0, false, {\n                        fileName: \"/Users/john/Documents/colour_coding/ping-map/components/MapGlobe.tsx\",\n                        lineNumber: 275,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"mt-4 p-2 bg-gray-800 rounded\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                children: \"Theoretical Minimum Ping Time: \"\n                            }, void 0, false, {\n                                fileName: \"/Users/john/Documents/colour_coding/ping-map/components/MapGlobe.tsx\",\n                                lineNumber: 278,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                className: \"font-bold text-xl text-blue-400\",\n                                children: pingTime\n                            }, void 0, false, {\n                                fileName: \"/Users/john/Documents/colour_coding/ping-map/components/MapGlobe.tsx\",\n                                lineNumber: 279,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Users/john/Documents/colour_coding/ping-map/components/MapGlobe.tsx\",\n                        lineNumber: 277,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Users/john/Documents/colour_coding/ping-map/components/MapGlobe.tsx\",\n                lineNumber: 273,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                ref: mapContainer,\n                className: \"map-container\",\n                style: {\n                    width: \"100%\",\n                    height: \"100vh\"\n                }\n            }, void 0, false, {\n                fileName: \"/Users/john/Documents/colour_coding/ping-map/components/MapGlobe.tsx\",\n                lineNumber: 283,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true);\n}\n_s(MapGlobe, \"8Ro51RQZ2ql0D+Mtb099fzMebfg=\");\n_c = MapGlobe;\nvar _c;\n$RefreshReg$(_c, \"MapGlobe\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/MapGlobe.tsx\n"));

/***/ })

});